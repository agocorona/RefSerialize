name:                RefSerialize
version:             0.4.0
synopsis:            Write to and read from ByteStrings maintaining internal memory references
description:
                     Read, Show and Binary instances do not check for internal data references to the same address.
                     As a result, the data is duplicated when serialized. This is a waste of space in the filesystem
                     and  also a waste of serialization time. but the worst consequence is that, when the serialized data is read,
                     it allocates multiple copies for the same object when referenced multiple times. Because multiple referenced
                     data is very typical in a pure language such is Haskell, this means that the resulting data loose the beautiful
                     economy of space and processing time that referential transparency permits.
                     .
                     In this release:
                     .
                     Compatibility with older versions of bytestring that have no 'toStrict' call
                     .
                     deserialization is much, much faster by using the stringsearch package
                     .

                     See "Data.RefSerialize" for details



category:            Parsing, Data, Database
license:                BSD3
license-file:            LICENSE
author:                Alberto GÃ³mez Corona
maintainer:           agocorona@gmail.com
Tested-With:        GHC == 6.8.2
Build-Type:          Simple
build-Depends:      binary,bytestring, base >=4 && <5,containers, hashtables,stringsearch


exposed-modules:     Data.RefSerialize, Data.RefSerialize.Parser, Data.RefSerialize.Serialize
ghc-options:

